```yml
title: Ad Portal Documentation
description: Documentation for the AdSDK Portal web interface
remote_theme: pmarsceill/just-the-docs
color_scheme: light

# Enable search
search_enabled: true

# Aux links for the upper right navigation
aux_links:
  "Ad Portal on GitHub":
    - "https://github.com/NimiB2/Ad-Portal"
  "Android SDK Documentation":
    - "https://nimib2.github.io/Android-SDK-Ads/"
  "Flask Backend Documentation":
    - "https://nimib2.github.io/Ad-Server/"

# Back to top link
back_to_top: true
back_to_top_text: "Back to top"
```

## docs/components.md

---
layout: default
title: Portal Components
nav_order: 6
---
# Portal Components

This document explains the key React components used in the Ad Portal.

## Component Structure

The Ad Portal is built with React and structured around these main components:

### App Component

The `App.js` component serves as the main container and handles routing between different views:

- Authentication view
- Dashboard view
- Ad form view
- Statistics view
- Administrator view

It maintains the state of the current view and passes necessary props to child components.

### Authentication Component

The `Auth.js` component handles user login and registration:

- Regular user authentication
- Developer/admin authentication
- Form validation
- User creation (for new emails)

Example from the code:
```javascript
const handleSubmit = async (e) => {
  e.preventDefault();
  setError('');
  
  try {
    setLoading(true);
    
    if (isDeveloperLogin) {
      // Developer login logic
      const response = await axios.post('/api/developers/login', { email });
      
      if (response.data.exists) {
        // Store developer info
        localStorage.setItem('currentUser', email);
        localStorage.setItem('isDeveloper', 'true');
        localStorage.setItem('developerId', response.data.developerId);
        onLogin(email);
      } else {
        setError('Developer not found');
      }
    } else {
      // Regular user login/registration
      // Check if email exists
      const emailExists = await checkEmailExists(email);
      
      if (isLogin) {
        // Login flow
        if (emailExists) {
          // Email exists, proceed with login
          await loginUser(email);
          onLogin(email);
        } else {
          // Email doesn't exist, show error
          setError('User not found. Please check your email or register.');
        }
      } else {
        // Registration flow
        if (emailExists) {
          // Email exists, prevent registration
          setError('This email is already registered. Please login instead.');
        } else {
          // Email doesn't exist, proceed with registration
          await registerUser(name, email);
          onLogin(email);
        }
      }
    }
  } catch (err) {
    setError(err.response?.data?.error || 'Operation failed');
  } finally {
    setLoading(false);
  }
};
```

### Dashboard Component

The `Dashboard.js` component displays:

- List of user's ads (or all ads for developers)
- Controls for ad management
- Navigation to statistics view

It handles:
- Fetching ads from the backend
- Filtering ads by user (for regular users)
- Grouping ads by performer (for developers)
- Ad deletion functionality

### Ad Form Component

The `AdForm.js` component provides a form for:

- Creating new ads
- Editing existing ads

It includes:
- Form validation
- Error handling
- API communication for saving ads

### Statistics Components

The portal includes two statistics components:

1. `AdStats.js` - Shows statistics for a single ad
2. `AllAdStats.js` - Shows statistics across all ads

These components feature:
- Metric calculations
- Data visualization using ApexCharts
- Date range filtering
- Dynamic data loading

### Admin Component

The `AdminView.js` component provides:

- List of all performers in the system
- System-wide metrics and analysis
- Advanced filtering options for developers

## State Management

The Ad Portal uses React's built-in state management with:

- `useState` hooks for component-level state
- Props for passing data between components
- `localStorage` for persistent authentication state

## API Integration

Each component integrates with the backend API through the centralized `api.js` file, which contains functions for:

- Authentication
- Ad CRUD operations
- Statistics retrieval
- System-level queries

## Design Patterns

The portal implements these common React patterns:

- **Conditional Rendering**: Different views based on user role
- **Component Composition**: Building complex UIs from smaller components
- **Controlled Forms**: Form inputs tied to component state
- **Error Boundaries**: Graceful error handling

## docs/project-structure.md

---
layout: default
title: Project Structure
nav_order: 7
---
# Project Structure

This document explains the organization of files and directories in the Ad Portal project.

## Directory Structure

```
ad-portal/
├── public/                  # Static assets
├── src/                     # Source code
│   ├── components/          # React components
│   │   ├── AdForm.js        # Ad creation/editing form
│   │   ├── AdStats.js       # Individual ad statistics
│   │   ├── AllAdStats.js    # System-wide statistics
│   │   ├── Auth.js          # Authentication component
│   │   ├── Dashboard.js     # Main dashboard view
│   │   └── AdminView.js     # Developer/admin view
│   ├── api.js               # API integration functions
│   ├── App.js               # Main application component
│   ├── App.css              # Main application styles
│   ├── index.js             # Application entry point
│   └── index.css            # Global styles
├── .env                     # Environment variables
├── package.json             # Dependencies and scripts
├── vercel.json              # Vercel deployment config
└── README.md                # Project documentation
```

## Key Files

### Configuration Files

- `package.json` - Dependencies and npm scripts
- `vercel.json` - API proxy configuration for Vercel deployment
- `.env` - Environment variables for API URL

### Entry Points

- `src/index.js` - React application entry point
- `src/App.js` - Main component that handles routing

### API Integration

- `src/api.js` - Contains all API communication functions

### React Components

- `src/components/Auth.js` - Authentication logic and UI
- `src/components/Dashboard.js` - Main user interface after login
- `src/components/AdForm.js` - Form for creating and editing ads
- `src/components/AdStats.js` - Statistics for individual ads
- `src/components/AllAdStats.js` - All advertisements statistics
- `src/components/AdminView.js` - Developer/admin view

### Styling

- `src/App.css` - Component-specific styles
- `src/index.css` - Global styles and reset

## Component Dependencies

The components have these dependencies:

1. `App.js` uses:
   - Auth
   - Dashboard
   - AdForm
   - AdStats
   - AllAdStats
   - AdminView

2. `Dashboard.js` uses:
   - API functions: getAds, deleteAd

3. `AdForm.js` uses:
   - API functions: createAd, updateAd

4. `AdStats.js` and `AllAdStats.js` use:
   - API functions: getAdStats, getPerformerStats
   - ApexCharts for data visualization

5. `Auth.js` uses:
   - API functions: loginUser, registerUser, checkEmailExists

## External Dependencies

The project uses these key external dependencies:

- **React** - UI library
- **ReactDOM** - DOM rendering
- **Axios** - HTTP client for API requests
- **ApexCharts** and **react-apexcharts** - Data visualization
- **Web Vitals** - Performance monitoring
